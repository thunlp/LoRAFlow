{"task_id": 555, "text": "请编写一个Python函数，用于找到前n个自然数的立方和与前n个自然数的和之间的差值。", "code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "test_list": ["assert difference(3) == 30", "assert difference(5) == 210", "assert difference(2) == 6"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 531, "text": "写一个函数来找到组成给定数值所需的最少硬币数量。", "code": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ", "test_list": ["assert min_coins([9, 6, 5, 1] ,4,11)==2", "assert min_coins([4,5,6,7,8,9],6,9)==1", "assert min_coins([1, 2, 3],3,4)==2"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 532, "text": "请写一个函数来检查两个给定的字符串是否是彼此的排列。", "code": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True", "test_list": ["assert check_permutation(\"abc\", \"cba\") == True", "assert check_permutation(\"test\", \"ttew\") == False", "assert check_permutation(\"xxyz\", \"yxzx\") == True"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 533, "text": "请写一个函数从给定元组中删除特定数据类型的元素。", "code": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ", "test_list": ["assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]", "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]", "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 897, "text": "写一个Python函数来检查给定单词是否存在于给定句子中。", "code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "test_list": ["assert is_Word_Present(\"machine learning\",\"machine\") == True", "assert is_Word_Present(\"easy\",\"fun\") == False", "assert is_Word_Present(\"python language\",\"code\") == False"], "test_setup_code": "", "challenge_test_list": ["assert is_Word_Present(\"machine learning\",\"machine\") == True", "assert is_Word_Present(\"easy\",\"fun\") == False", "assert is_Word_Present(\"python language\",\"code\") == False"]}
{"task_id": 543, "text": "请编写一个函数来添加两个数字并打印它们的和的位数。", "code": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count", "test_list": ["assert count_digits(9875,10)==(4)", "assert count_digits(98759853034,100)==(11)", "assert count_digits(1234567,500)==(7)"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 555, "text": "请编写一个Python函数，用于找到前n个自然数的立方和与前n个自然数的和之间的差值。", "code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "test_list": ["assert difference(3) == 30", "assert difference(5) == 210", "assert difference(2) == 6"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 566, "text": "请写一个函数来计算一个非负整数的和。", "code": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))", "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 567, "text": "编写一个函数来检查指定的列表是否已排序。", "code": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result", "test_list": ["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 577, "text": "请编写一个Python函数，用于找到给定数字的阶乘中的最后一位数字。", "code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "test_list": ["assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(30) == 0"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 587, "text": "编写一个函数将列表转换为元组。", "code": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex", "test_list": ["assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)", "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)", "assert list_tuple([58,44,56])==(58,44,56)"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 600, "text": "请编写一个Python函数，使用位操作符来检查给定的数字是偶数还是奇数。", "code": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ", "test_list": ["assert is_Even(1) == False", "assert is_Even(2) == True", "assert is_Even(3) == False"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 511, "text": "请写一个Python函数来找到给定数字因子的最小和。", "code": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum", "test_list": ["assert find_Min_Sum(12) == 7", "assert find_Min_Sum(105) == 15", "assert find_Min_Sum(2) == 2"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 512, "text": "编写一个函数来计算混合嵌套元组中元素的频率。", "code": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ", "test_list": ["assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}", "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}", "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 513, "text": "请写一个函数，将元组转换为列表，将给定的字符串添加在每个元素后面。", "code": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ", "test_list": ["assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']", "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']", "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 515, "text": "请编写一个函数来检查是否存在一个子集的和能被m整除。", "code": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]", "test_list": ["assert modular_sum([3, 1, 7, 5], 4, 6) == True", "assert modular_sum([1, 7], 2, 5) == False", "assert modular_sum([1, 6], 2, 5) == False"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 519, "text": "写一个函数来计算四面体的体积。", "code": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)", "test_list": ["assert volume_tetrahedron(10)==117.85", "assert volume_tetrahedron(15)==397.75", "assert volume_tetrahedron(20)==942.81"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 520, "text": "写一个函数来找到给定数组元素的最小公倍数。", "code": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ", "test_list": ["assert get_lcm([2, 7, 3, 9, 4]) == 252", "assert get_lcm([1, 2, 8, 3]) == 24", "assert get_lcm([3, 8, 4, 10, 5]) == 120"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 521, "text": "请编写一个函数来打印并检查三角形是否为不等边三角形。", "code": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False", "test_list": ["assert check_isosceles(6,8,12)==True", "assert check_isosceles(6,6,12)==False", "assert check_isosceles(6,15,20)==True"], "test_setup_code": "", "challenge_test_list": []}
{"task_id": 522, "text": "编写一个函数来找到给定数组的最长比特湾子序列。", "code": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum", "test_list": ["assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7", "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6", "assert lbs([80, 60, 30, 40, 20, 10]) == 5"], "test_setup_code": "", "challenge_test_list": []}